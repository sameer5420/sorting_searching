int bs(vector<int>nums,int target,int s,int e){
    int ans=-1;
    int l=s,r=e;
    while(l<=r){
        int mid=l+(r-l)/2;
        if(nums[mid]==target){
            ans=mid;
            break;
        }
        else if(nums[mid]>target){
            r=mid-1;
        }
        else{
            l=mid+1;
        }
    }
    return ans;
}
int pivot(vector<int>nums){
    int s=0,e=nums.size()-1;
    int n=nums.size();
    while(s<=e){
        int mid=s+(e-s)/2;
        int prev=(mid-1+n)%n;
        int next=(mid+1)%n;
        if(nums[mid]<=nums[prev]&&nums[mid]<=nums[next]){
            return mid;
        }
        else if(nums[mid]<=nums[e]){
            e=mid-1;
        }
        else if(nums[mid]>=nums[s]){
            s=mid+1;
        }
    }
    return 0;
}
int search(vector<int>& nums, int target) {
    int pivot_element=pivot(nums);
    int left=bs(nums,target,0,pivot_element-1);
    int right=bs(nums,target,pivot_element,nums.size()-1);
    if(right==-1){
        return left;
    }
    else{
        return right;
    }
}
